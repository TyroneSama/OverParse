//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OverParse {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Log {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Log() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("OverParse.Log", typeof(Log).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Canceled out of directory picker.
        /// </summary>
        internal static string CON_CanceledDirPicker {
            get {
                return ResourceManager.GetString("CON_CanceledDirPicker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking for damagelog directory override.
        /// </summary>
        internal static string CON_check_damage_override {
            get {
                return ResourceManager.GetString("CON_check_damage_override", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Making sure pso2_bin\damagelogs exists.
        /// </summary>
        internal static string CON_damagelog_exist {
            get {
                return ResourceManager.GetString("CON_damagelog_exist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log directory override: {0}.
        /// </summary>
        internal static string CON_found_damage_override {
            get {
                return ResourceManager.GetString("CON_found_damage_override", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found a config file for damage dump plugin, parsing.
        /// </summary>
        internal static string CON_found_damagecfg {
            get {
                return ResourceManager.GetString("CON_found_damagecfg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found existing active player ID: {0}.
        /// </summary>
        internal static string CON_FoundYou {
            get {
                return ResourceManager.GetString("CON_FoundYou", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No damagelog warning.
        /// </summary>
        internal static string CON_Hack {
            get {
                return ResourceManager.GetString("CON_Hack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please select your pso2_bin directory. OverParse uses this to read your damage logs.
        ///
        ///If you picked a folder while setting up the Tweaker, choose that. Otherwise, it will be in your PSO2 installation folder..
        /// </summary>
        internal static string CON_InvaildPSO2_binPath {
            get {
                return ResourceManager.GetString("CON_InvaildPSO2_binPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LaunchMethod prompt.
        /// </summary>
        internal static string CON_LaunchMethod {
            get {
                return ResourceManager.GetString("CON_LaunchMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} unmapped: {1} ({2} dmg from {3}).
        /// </summary>
        internal static string CON_Log_Ally {
            get {
                return ResourceManager.GetString("CON_Log_Ally", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to dd\.hh\:mm\:ss.
        /// </summary>
        internal static string CON_Log_Ally_Time {
            get {
                return ResourceManager.GetString("CON_Log_Ally_Time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logging encounter information to file.
        /// </summary>
        internal static string CON_Log_Start {
            get {
                return ResourceManager.GetString("CON_Log_Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No PSO2DamageDump.cfg.
        /// </summary>
        internal static string CON_missing_damagecfg {
            get {
                return ResourceManager.GetString("CON_missing_damagecfg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accepted plugin install.
        /// </summary>
        internal static string CON_Plugin_Prompt_accepted {
            get {
                return ResourceManager.GetString("CON_Plugin_Prompt_accepted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Denied plugin install.
        /// </summary>
        internal static string CON_Plugin_Prompt_denied {
            get {
                return ResourceManager.GetString("CON_Plugin_Prompt_denied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prompting for initial plugin install.
        /// </summary>
        internal static string CON_Plugin_Prompt_initial {
            get {
                return ResourceManager.GetString("CON_Plugin_Prompt_initial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prompting for plugin update.
        /// </summary>
        internal static string CON_Plugin_Prompt_update {
            get {
                return ResourceManager.GetString("CON_Plugin_Prompt_update", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installed: {0} / Current: {1}.
        /// </summary>
        internal static string CON_Plugin_Status {
            get {
                return ResourceManager.GetString("CON_Plugin_Status", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading from {0}.
        /// </summary>
        internal static string CON_ReadingLog {
            get {
                return ResourceManager.GetString("CON_ReadingLog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} | {1}.
        /// </summary>
        internal static string CON_split {
            get {
                return ResourceManager.GetString("CON_split", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Testing {0} as pso2_bin directory....
        /// </summary>
        internal static string CON_TestPSO2_binPath {
            get {
                return ResourceManager.GetString("CON_TestPSO2_binPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FIRST ATTACK RECORDED: {0} dmg from {1} ({2}) with {3}, to {4} ({5}).
        /// </summary>
        internal static string CON_Update_first {
            get {
                return ResourceManager.GetString("CON_Update_first", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found new active player ID: {0}.
        /// </summary>
        internal static string CON_Update_newplayer {
            get {
                return ResourceManager.GetString("CON_Update_newplayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PLUGIN INSTALL FAILED: {0}.
        /// </summary>
        internal static string CON_UpdatePlugin_Bad {
            get {
                return ResourceManager.GetString("CON_UpdatePlugin_Bad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plugin install successful.
        /// </summary>
        internal static string CON_UpdatePlugin_Good {
            get {
                return ResourceManager.GetString("CON_UpdatePlugin_Good", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ###### {0} - {1} dmg ({2}) ######&quot;.
        /// </summary>
        internal static string LOG_Combatant_header {
            get {
                return ResourceManager.GetString("LOG_Combatant_header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}% | {1} ({2} dmg).
        /// </summary>
        internal static string LOG_Combatant_line1 {
            get {
                return ResourceManager.GetString("LOG_Combatant_line1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to |   {0} hits - {1} min, {2} avg, {3} max.
        /// </summary>
        internal static string LOG_Combatant_line2 {
            get {
                return ResourceManager.GetString("LOG_Combatant_line2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} | {1} dmg | {2} contrib | {3} DPS | Max: {4}.
        /// </summary>
        internal static string LOG_Combatant_Stat {
            get {
                return ResourceManager.GetString("LOG_Combatant_Stat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to mm\:ss.
        /// </summary>
        internal static string LOG_TimeStamp {
            get {
                return ResourceManager.GetString("LOG_TimeStamp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you use the PSO2 Tweaker?.
        /// </summary>
        internal static string UI_AskTweakerUsage {
            get {
                return ResourceManager.GetString("UI_AskTweakerUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OverParse needs a valid PSO2 installation to function.
        ///The application will now close..
        /// </summary>
        internal static string UI_CanceledDirPicker {
            get {
                return ResourceManager.GetString("UI_CanceledDirPicker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} {1} | .
        /// </summary>
        internal static string UI_Clip {
            get {
                return ResourceManager.GetString("UI_Clip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your PSO2 folder doesn&apos;t contain any damagelogs. This is not an error, just a reminder!
        ///
        ///Please turn on the Damage Parser plugin in PSO2 Tweaker (orb menu &gt; Plugins). OverParse needs this to function. You may also want to update the plugins while you&apos;re there..
        /// </summary>
        internal static string UI_Hack {
            get {
                return ResourceManager.GetString("UI_Hack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please select your pso2_bin directory.
        ///
        ///This folder will be inside your PSO2 install folder, which is usually at C:\PHANTASYSTARONLINE2\.
        ///
        ///If you installed the game multiple times (e.g. through the torrent), please make sure you pick the right one, or OverParse won&apos;t be able to read your logs!.
        /// </summary>
        internal static string UI_InvaildPSO2_binPath {
            get {
                return ResourceManager.GetString("UI_InvaildPSO2_binPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to That doesn&apos;t appear to be a valid pso2_bin directory.
        ///
        ///If you installed the game using default settings, it will probably be in C:\PHANTASYSTARONLINE2\pso2_bin\. Otherwise, find the location you installed to..
        /// </summary>
        internal static string UI_InvaildPSO2_binPath_NAG {
            get {
                return ResourceManager.GetString("UI_InvaildPSO2_binPath_NAG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OverParse needs the Damage Parser plugin to function.
        ///
        ///The application will now close..
        /// </summary>
        internal static string UI_Plugin_Prompt_denied {
            get {
                return ResourceManager.GetString("UI_Plugin_Prompt_denied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OverParse needs a Tweaker plugin to recieve its damage information.
        ///
        ///The plugin can be installed without the Tweaker, but it won&apos;t be automatically updated, and I can&apos;t provide support for this method.
        ///
        ///Do you want to try to manually install the Damage Parser plugin?.
        /// </summary>
        internal static string UI_Plugin_Prompt_initial {
            get {
                return ResourceManager.GetString("UI_Plugin_Prompt_initial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This release of OverParse includes a new version of the parsing plugin. Would you like to update now?
        ///
        ///OverParse may behave unpredictably if you use a different version than it expects..
        /// </summary>
        internal static string UI_Plugin_Prompt_update {
            get {
                return ResourceManager.GetString("UI_Plugin_Prompt_update", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select your pso2_bin folder. This will be inside the folder you installed PSO2 to..
        /// </summary>
        internal static string UI_SelectPSO2_Finder {
            get {
                return ResourceManager.GetString("UI_SelectPSO2_Finder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OverParse Setup.
        /// </summary>
        internal static string UI_SetupTitle {
            get {
                return ResourceManager.GetString("UI_SetupTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Something went wrong with manual installation. This usually means that the files are already in use: try again with PSO2 closed.
        ///
        ///If you&apos;ve recieved this message even after closing PSO2, you may need to run OverParse as administrator..
        /// </summary>
        internal static string UI_UpdatePlugin_Bad {
            get {
                return ResourceManager.GetString("UI_UpdatePlugin_Bad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setup complete! A few files have been copied to your pso2_bin folder.\n\nIf PSO2 is running right now, you&apos;ll need to close it before the changes can take effect..
        /// </summary>
        internal static string UI_UpdatePlugin_Good {
            get {
                return ResourceManager.GetString("UI_UpdatePlugin_Good", resourceCulture);
            }
        }
    }
}
